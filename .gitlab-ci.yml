### Attack 4 showcase

# 1. Continuous Integration viewpoint
# In this pipeline, an image is built, and later we suppose that some untrusted entity tampers with it
# For simplicity, we think of "tampers" as an action that replaces the original image with another one (something 
# like crane copy excid-cicd-demo-project:1.0.7 alpine:latest)
# This is supposed to be done sometime after CI finishes, but for simplicity, and for seeing things from the same
# point of view, we embed the "malicious" action in the pipeline right after building the image

# 2. Continuous Deployment viewpoint
# More or less, the same Kyverno policy applies for all attacks. We have authored a policy that expects image 
# "registry.gitlab.../excid-cicd-demo-project:1.0.7" to be signed by the GitLab runner. So no significant changes in the 
# K8s infrastructure must be done
stages:
  - build_image
  - tamper_with_image

################## build_image ##################

kaniko-build:
  stage: build_image
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:1.0.7"
      --image-name-with-digest-file tmp.hash
    - sed -n 's/.*@sha256:\([a-f0-9]\+\)/\1/p' tmp.hash > img.hash
  allow_failure: true
  artifacts:
    when: always
    paths:
      - img.hash
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

malicious-action:
  stage: tamper_with_image
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add jq
    - apk add curl
    - VERSION=$(curl -s "https://api.github.com/repos/google/go-containerregistry/releases/latest" | jq -r '.tag_name')
    - | 
      OS=Linux
      ARCH=x86_64
      curl -sL "https://github.com/google/go-containerregistry/releases/download/${VERSION}/go-containerregistry_${OS}_${ARCH}.tar.gz" > go-containerregistry.tar.gz
    - tar -zxvf go-containerregistry.tar.gz -C /usr/local/bin/ crane
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - crane delete "${CI_REGISTRY_IMAGE}:1.0.7"
    - crane copy alpine:latest "${CI_REGISTRY_IMAGE}:1.0.7"
  allow_failure: true
