### Attack 2 showcase

# 1. Continuous Integration viewpoint
# In this pipeline, an image is built using an outdated dependency. Here, because this is an express-js project,
# we define outdated as "express-js version < 4". We suppose during CI an attacker manages to install express version 3.

# 2. Continuous Deployment viewpoint
# More or less, the same Kyverno policy applies for all attacks. We have authored a policy that expects the SBOM of image 
# to be attested using STaaS CLI. The expectation regarding the SBOM contents states that 
# "express-js version should be > 4". Also, the image itself is signed and verified.
stages:
  - build_image
  - sign_image
  - generate_sbom
  - attestations
 
# build the image with the vulnerable dependency
kaniko-malicious-build:
  stage: build_image
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  # before_script:
  #   - apk add npm
  script:
    # - npm i express@3
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:1.0.7"
      --image-name-with-digest-file tmp.hash
    - sed -n 's/.*@sha256:\([a-f0-9]\+\)/\1/p' tmp.hash > img.hash
  allow_failure: true
  artifacts:
    when: always
    paths:
      - img.hash
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

sign-container-image:
  stage: sign_image
  needs: ["kaniko-malicious-build"]
  image: ghcr.io/excid-io/staas-cli:latest
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - export COMMENT=container-signature-$CI_PIPELINE_URL
    - python3 /staas/staas-cli.py sign-image -t $STAAS_API_KEY -c $COMMENT -o payload.json.bundle $CI_REGISTRY_IMAGE:1.0.7
  after_script:
    - COSIGN_EXPERIMENTAL=1 cosign verify "$CI_REGISTRY_IMAGE:1.0.7" --certificate-identity=$STAAS_EMAIL --certificate-oidc-issuer=https://staas.excid.io --certificate-chain /staas/staas-ca.pem --insecure-ignore-sct
  allow_failure: true
  artifacts:
    when: always
    paths:
      - payload.json.bundle

trivy_sbom:
  stage: generate_sbom
  needs: ["sign-container-image"]
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
    COSIGN_YES: "true"
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - apk add npm
    - apk --no-cache add curl
    # - apk --no-cache add jq
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 cosign
    - chmod +x cosign
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - apk --no-cache add python3 py3-pip
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - docker pull "$CI_REGISTRY_IMAGE:1.0.7"
    - npm i express@3
    - trivy image --format cyclonedx -o image.sbom.json "$CI_REGISTRY_IMAGE:1.0.7"
  allow_failure: true
  artifacts:
    when: always
    paths:
      - image.sbom.json

staas-sbom:
  stage: attestations
  needs: ["trivy_sbom"] 
  image: ghcr.io/excid-io/staas-cli:latest
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # for sbom attestation: 1. generate sbom 2. pass sbom as predicate to staas-cli
    # 1 was done in trivy-sbom job
    # 2 run staas-cli.py
    - python3 /staas/staas-cli.py attest-image $CI_REGISTRY_IMAGE:1.0.7 --token $STAAS_API_KEY --predicate-type "https://cyclonedx.org/bom" --predicate ./image.sbom.json --root-ca-file /staas/staas-ca.pem --subject $STAAS_EMAIL
  after_script:
    - COSIGN_EXPERIMENTAL=1 cosign verify-attestation "$CI_REGISTRY_IMAGE:1.0.7" --type cyclonedx --certificate-identity=$STAAS_EMAIL --certificate-oidc-issuer="https://staas.excid.io" --certificate-chain /staas/staas-ca.pem --insecure-ignore-sct=true
  allow_failure: true