stages:
  # - secret_scanning
  # - sast
  # - sca
  - build_image
  - container_signature
  - scan_image
  - attestations
  # - deploy
  # - dast_zap

################## secret_scanning ##################

# gitleaks:
#   stage: secret_scanning
#   image:
#     name: zricethezav/gitleaks
#     entrypoint: [""]
#   script:
#     - gitleaks dir . --verbose -f json -r gitleaks_detect_dir.json --exit-code 0
#     - gitleaks git . --verbose -f json -r gitleaks_detect_git.json --exit-code 0
#   allow_failure: true
#   artifacts:
#     when: always
#     paths:
#       - gitleaks_detect_dir.json
#       - gitleaks_detect_git.json

# ################## sast ##################

# njsscan:
#   stage: sast
#   needs: ["gitleaks"]
#   image: python
#   before_script:
#     - pip3 install --upgrade njsscan
#   script:
#     - njsscan . --exit-warning --sarif -o njsscan.sarif
#   allow_failure: true
#   artifacts:
#     when: always
#     paths:
#     - njsscan.sarif

# semgrep:
#   stage: sast
#   needs: ["gitleaks"]
#   image: returntocorp/semgrep
#   variables:
#     SEMGREP_RULES: p/javascript
#   script:
#     - semgrep ci --json --output semgrep.json
#   allow_failure: true
#   artifacts:
#     when: always
#     paths:
#     - semgrep.json

# sonarqube:
#   image: 
#       name: sonarsource/sonar-scanner-cli:11
#       entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   stage: sast  
#   cache:
#     policy: pull-push
#     key: "sonar-cache-$CI_COMMIT_REF_SLUG"
#     paths:      
#       - "${SONAR_USER_HOME}/cache"
#       - sonar-scanner/
#   script: 
#     - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
#   allow_failure: true

# ################## sca ##################
  
# retire:
#   stage: sca
#   image: node:latest
#   needs: ["njsscan", "semgrep", "sonarqube"]
#   before_script:
#     - npm install -g retire
#   script:
#     - retire --outputformat cyclonedx --exitwith 0 --outputpath retirejs.xml
#   artifacts:
#     reports:
#       sast: retirejs.xml

################## build_image ##################

# There is no "real" difference between the two build jobs. 
# Kaniko is a more secure way of building images in the GitLab CI case (instead of DinD)
# docker-build:
#   stage: build_image
#   # needs: ["retire"]
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   variables:
#     DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#     SECURE_FILES_DOWNLOAD_PATH: './'
#     RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
#     DOCKER_TLS_CERTDIR: "/certs"
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#     - apk update && apk add curl
#   script:
#     - docker build --iidfile img.hash -t "$DOCKER_IMAGE_NAME" .
#     - docker push "$DOCKER_IMAGE_NAME"
#     - |
#       if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#         docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
#         docker push "$CI_REGISTRY_IMAGE:latest"
#       fi 
#   artifacts:
#     when: always
#     paths:
#       - img.hash
#   allow_failure: true
#   rules:
#     - if: $CI_COMMIT_BRANCH
#       exists:
#         - Dockerfile

kaniko-build:
  stage: build_image
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:1.0.7"
      --image-name-with-digest-file tmp.hash
    - sed -n 's/.*@sha256:\([a-f0-9]\+\)/\1/p' tmp.hash > img.hash
  allow_failure: true
  artifacts:
    when: always
    paths:
      - img.hash
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

# kaniko-build-unsigned:
#   stage: build_image
#   image:
#     name: gcr.io/kaniko-project/executor:v1.23.2-debug
#     entrypoint: [""]
#   variables:
#     RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
#   script:
#     - /kaniko/executor
#       --context "${CI_PROJECT_DIR}"
#       --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
#       --destination "${CI_REGISTRY_IMAGE}:unsigned"
#   allow_failure: true
#   rules:
#     - if: $CI_COMMIT_BRANCH
#       exists:
#         - Dockerfile

################## container_signature ##################

# staas-sign-container-image:
#   stage: container_signature
#   needs: ["kaniko-build"]
#   image: python:3.9
#   before_script:
#     - apt-get update && apt-get install jq -y
#     - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
#     - mv cosign-linux-amd64 cosign
#     - chmod +x cosign
#     - pip install requests
#   script:
#     - export COMMENT=container-signature
#     - python3 staas-upload.py img.hash $STAAS_API_TOKEN $COMMENT
#     - cat img.hash
#     - cat img.hash.bundle
#     - jq -r '.base64Signature' ./img.hash.bundle > img.sig
#     # - ./cosign attach signature "$CI_REGISTRY_IMAGE:latest" --signature img.sig --payload ./img.hash.bundle
#   after_script:
#     - ./cosign verify-blob --certificate-identity=$STAAS_EMAIL --certificate-oidc-issuer=https://staas.excid.io --certificate-chain ca.pem --insecure-ignore-sct --bundle img.hash.bundle img.hash
#   allow_failure: true
#   artifacts:
#     when: always
#     paths:
#       - img.hash.bundle

cosign-sign-container-image:
  stage: container_signature
  needs: ["kaniko-build"]
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
    COSIGN_YES: "true"
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - apk --no-cache add curl
    # - apk --no-cache add jq
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 cosign
    - chmod +x cosign
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # - COSIGN_EXPERIMENTAL=1 ./cosign sign "$CI_REGISTRY_IMAGE:1.0.7" --registry-referrers-mode=oci-1-1 
    - COSIGN_EXPERIMENTAL=1 ./cosign sign "$CI_REGISTRY_IMAGE:1.0.7"  # COSIGN_EXPERIMENTAL=1  --registry-referrers-mode=oci-1-1
  after_script:
    - COSIGN_EXPERIMENTAL=1 ./cosign verify "$CI_REGISTRY_IMAGE:1.0.7" --experimental-oci11=true --certificate-identity-regexp=.* --certificate-oidc-issuer-regexp=.*
  allow_failure: true

################## scan_image ##################

# trivy_scan:
#   stage: scan_image
#   needs: ["kaniko-build"]
#   image: docker:24
#   services:
#     - name: docker:24-dind
#       alias: docker
#   before_script:
#     - apk --no-cache add curl python3 py3-pip
#     - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#   script:
#     - docker pull "$CI_REGISTRY_IMAGE:latest"
#     - trivy image "$CI_REGISTRY_IMAGE:latest"
#   allow_failure: true

trivy_sbom:
  stage: scan_image
  needs: ["kaniko-build"]
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
    COSIGN_YES: "true"
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - apk --no-cache add curl
    # - apk --no-cache add jq
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 cosign
    - chmod +x cosign
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - apk --no-cache add python3 py3-pip
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - docker pull "$CI_REGISTRY_IMAGE:1.0.7"
    - trivy image --format cyclonedx -o image.sbom.json "$CI_REGISTRY_IMAGE:1.0.7"
  allow_failure: true
  artifacts:
    when: always
    paths:
      - image.sbom.json
 

################## attestation ##################

# staas-provenance:
#   stage: attestations
#   needs: ["kaniko-build"]
#   image: python:3.9
#   before_script:
#     - apt-get update && apt-get install jq -y
#     - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
#     - mv cosign-linux-amd64 cosign
#     - chmod +x cosign
#     - pip install requests
#   script: # image.prov.json is an in-toto statment, a provenance document about the container image
#     - |
#       export IMG_HASH_B64=$(cat img.hash | base64 -w 0)
#       jq --arg b64hash "$IMG_HASH_B64" --arg imgname "$CI_REGISTRY_IMAGE" '.subject = [{"name":$imgname, "digest":{"sha256":$b64hash}}]' artifacts-metadata.json > image.prov.json
#     - export COMMENT=provenance
#     - python3 staas-upload.py image.prov.json $STAAS_API_TOKEN $COMMENT
#   after_script:
#     - ./cosign verify-blob --certificate-identity=$STAAS_EMAIL --certificate-oidc-issuer=https://staas.excid.io --certificate-chain ca.pem --insecure-ignore-sct --bundle image.prov.json.bundle image.prov.json
#   allow_failure: true
#   artifacts:
#     when: always
#     paths:
#       - image.prov.json.bundle

# staas-sbom:
#   stage: attestations
#   needs: ["trivy_sbom"]
#   image: python:3.9
#   before_script:
#     - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
#     - mv cosign-linux-amd64 cosign
#     - chmod +x cosign
#     - pip install requests
#   script:
#     - export COMMENT=sbom
#     - python3 staas-upload.py image.sbom.json $STAAS_API_TOKEN $COMMENT
#   after_script:
#     - ./cosign verify-blob --certificate-identity=$STAAS_EMAIL --certificate-oidc-issuer=https://staas.excid.io --certificate-chain ca.pem --insecure-ignore-sct --bundle image.sbom.json.bundle image.sbom.json
#   allow_failure: true
#   artifacts:
#     when: always
#     paths:
#       - image.sbom.json.bundle

# Can also use syft to generate and attest the SBOM (instead of trivy, use whichever you prefer)
# syft-attest-sbom:
#   stage: scan_image
#   needs: ["kaniko-build"]
#   image: docker:24
#   services:
#     - name: docker:24-dind
#       alias: docker
#   variables:
#       COSIGN_YES: "true"
#   id_tokens:
#     SIGSTORE_ID_TOKEN:
#       aud: sigstore
#   before_script:
#     - apk --no-cache add curl
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY  
#     - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
#     - mv cosign-linux-amd64 cosign
#     - chmod +x cosign
#     - mv cosign /usr/local/bin
#     - curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
#   script:
#     - syft attest "$CI_REGISTRY_IMAGE:1.0.7" -o spdx-json > image.sbom.json
#   after-script:
#     - cosign verify-attestation "$CI_REGISTRY_IMAGE:1.0.7" --type 'https://spdx.dev/Document' --certificate-identity-regexp=.* --certificate-oidc-issuer-regexp=.* | jq
#   artifacts:
#     when: always
#     paths:
#       - image.sbom.json
  
cosign-attest-provenance:
  stage: attestations
  needs: ["kaniko-build"]
  image: python:3.9
  variables:
    COSIGN_YES: "true"
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 cosign
    - chmod +x cosign
    - pip install requests
    - apt-get update && apt-get install jq -y
  script:
    - |
      export IMG_HASH=$(cat img.hash)
      jq --arg b64hash "$IMG_HASH" --arg imgname "$CI_REGISTRY_IMAGE" '.subject = [{"name":$imgname, "digest":{"sha256":$b64hash}}]' artifacts-metadata.json > image.prov.json
    - COSIGN_EXPERIMENTAL=1 ./cosign attest --type 'https://slsa.dev/provenance/v1' --predicate image.prov.json "$CI_REGISTRY_IMAGE:1.0.7"
  after_script:
    - COSIGN_EXPERIMENTAL=1 ./cosign verify-attestation --type "https://slsa.dev/provenance/v1" "$CI_REGISTRY_IMAGE:1.0.7" --certificate-identity-regexp=.* --certificate-oidc-issuer-regexp=.*
  allow_failure: true

cosign-attest-sbom:
  stage: attestations
  needs: ["trivy_sbom"]
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  variables:
      COSIGN_YES: "true"
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  before_script:
    - apk --no-cache add curl
    - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
    - mv cosign-linux-amd64 cosign
    - chmod +x cosign
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - COSIGN_EXPERIMENTAL=1 ./cosign attest -y --type 'https://cyclonedx.org/bom' --predicate image.sbom.json "$CI_REGISTRY_IMAGE:1.0.7"
  after_script:
    - COSIGN_EXPERIMENTAL=1 ./cosign verify-attestation --type cyclonedx "$CI_REGISTRY_IMAGE:1.0.7" --certificate-identity-regexp=.* --certificate-oidc-issuer-regexp=.*
  allow_failure: true

# oras-cosign-attest-sbom:
#   stage: attestations
#   needs: ["trivy_sbom"]
#   image: docker:24
#   services:
#     - name: docker:24-dind
#       alias: docker
#   variables:
#     DOCKER_TLS_CERTDIR: ""
#     COSIGN_YES: "true"
#   id_tokens:
#     SIGSTORE_ID_TOKEN:
#       aud: sigstore
#   before_script:
#     - apk --no-cache add curl
#     - apk --no-cache add jq
#     - | # install cosign
#       curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
#       mv cosign-linux-amd64 cosign
#       chmod +x cosign
#       mv cosign /usr/local/bin
#       echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#     - | # install oras
#       VERSION="1.2.2"
#       curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
#       mkdir -p oras-install/
#       tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
#       mv oras-install/oras /usr/local/bin/
#       rm -rf oras_${VERSION}_*.tar.gz oras-install/
#     - echo $CI_REGISTRY_PASSWORD | oras login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#   script:
#     - oras attach --artifact-type text/spdx+json "$CI_REGISTRY_IMAGE:1.0.7" image.sbom.json
#     - report_digest=$(oras discover "$CI_REGISTRY_IMAGE:1.0.7"  -o json | jq .manifests[0].digest | tr -d \") 
#     - COSIGN_EXPERIMENTAL=1 cosign sign -y --registry-referrers-mode=oci-1-1 "$CI_REGISTRY_IMAGE@$report_digest"
#   after_script:
#     - oras discover $CI_REGISTRY_IMAGE:1.0.7
#   allow_failure: true


################## deploy ##################

# deploy:
#   stage: deploy
#   needs: ["staas-sbom", "staas-provenance"]
#   before_script:
#     - echo "deb http://gr.archive.ubuntu.com/ubuntu ubnt main" >> /etc/apt/sources.list
#     - apt-get update && apt-get install openssh
#     - apt-get install sshpass
#   script:
#     - sshpass -p $AZURE_APPVM_PASS ssh -o StrictHostKeyChecking=no $AZURE_APPVM_USER@$APP_VM_IP docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#     - sshpass -p $AZURE_APPVM_PASS ssh -o StrictHostKeyChecking=no $AZURE_APPVM_USER@$APP_VM_IP docker run -it -d --rm -p 8080:8080 -p 8443:8443 "$CI_REGISTRY_IMAGE:latest" 

################## dast_zap ##################

# zap:
#   stage: dast_zap
#   needs: ["deploy"]
#   image: 
#     name: ghcr.io/zaproxy/zaproxy:stable
#   allow_failure: true
#   before_script:
#     - mkdir /zap/wrk
#   script:
#     - /zap/zap-full-scan.py -t https://128.251.24.109:8443/ -g gen.conf -r zapreport.html -I
#     - cp /zap/wrk/zapreport.html zapreport.html
#   artifacts:
#     when: always
#     paths:
#       - zapreport.html
