apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: sbomvalidation
spec:
  crd:
    spec:
      names:
        kind: SbomValidation
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package sbomvalidation

        # This template defines policy for SBOM validation.
        # It checks the following:
        # - If there are any system errors
        # - If there are errors for any of the images
        # - There is at least one SBOM report that was verified
        # - Only considers ONE SBOM report
        # - The SBOM is valid (isSuccess = true)
        # - The SBOM has a valid notary project signature (if require_signature = true)s

        import future.keywords.if
        import future.keywords.in

        default require_signature := false # change to true to require notary project signature on SBOM

        # Get data from Ratify
        remote_data := response {
          images := [img | img = input.review.object.spec.containers[_].image]
          images_init := [img | img = input.review.object.spec.initContainers[_].image]
          images_ephemeral := [img | img = input.review.object.spec.ephemeralContainers[_].image]
          other_images := array.concat(images_init, images_ephemeral)
          all_images := array.concat(other_images, images)
          response := external_data({"provider": "ratify-provider", "keys": all_images})
        }

        # Base Gatekeeper violation
        violation[{"msg": msg}] {
          general_violation[{"result": msg}]
        }
        
        # Check if there are any system errors
        general_violation[{"result": result}] {
          err := remote_data.system_error
          err != ""
          result := sprintf("System error calling external data provider for SBOM verification: %s", [err])
        }
        
        # Check if there are errors for any of the images
        general_violation[{"result": result}] {
          count(remote_data.errors) > 0
          result := sprintf("Error validating one or more images for SBOM verification: %s", remote_data.errors)
        }

        # Check if the success criteria is true
        general_violation[{"result": result}] {
          subject_validation := remote_data.responses[_]
          subject_result := subject_validation[1]
          not process_sboms(subject_result)
          result := sprintf("Subject failed SBOM verification: %s", [subject_validation[0]])
        }

        process_sboms(subject_result) if {
          # collect verifier reports from sbom verifier
          sbom_results := [res | subject_result.verifierReports[i].type == "sbom"; res := subject_result.verifierReports[i]]
          count(sbom_results) > 0
          # validate SBOM contents for ONLY the first report found
          process_sbom(sbom_results[0])
        }

        process_sbom(report) if {
          report.isSuccess == true
          valid_signatures(report)
        }

        valid_signatures(_) := true {
          require_signature == false
        }

        valid_signatures(report) := true {
          require_signature
          count(report.nestedResults) > 0
          some nestedResult in report.nestedResults
          nestedResult.artifactType == "application/vnd.cncf.notary.signature"
          nestedResult.isSuccess
        }
