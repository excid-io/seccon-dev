# Copyright The Ratify Authors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package ratify.policy

import future.keywords.if
import future.keywords.in
import future.keywords.every

# This template defines policy for vulnerability report validation.
# It checks the following:
# - There is at least one vulnerability report that was verified
# - Only considers the latest vulnerability report
# - The latest vulnerability report is valid (isSuccess = true)
# - The latest vulnerability report has a valid notary project signature (if require_signature = true)

default require_signature := false # change to true to require notary project signature on vulnerability report
default valid := false

# all artifacts MUST be valid
valid {
    not failed_verify(input)
}

failed_verify(reports) {
    not process_vuln_reports(reports)
}

process_vuln_reports(subject_result) if {
    # collect verifier reports from vulnerabilityreport verifier
    vuln_results := [res | subject_result.verifierReports[i].verifierReports[j].type == "vulnerabilityreport"; res := subject_result.verifierReports[i].verifierReports[j]]
    count(vuln_results) > 0
    # calculate the timestamp between current time and creation time
    timestamp_diff_results_map := {diff_in_ns: i | diff_in_ns := time.now_ns() - time.parse_rfc3339_ns(vuln_results[i].extensions["createdAt"])}
    count(timestamp_diff_results_map) > 0
    # extract time difference durations into separate array to find global minimum
    timestamp_diff_results_arr := [key | timestamp_diff_results_map[key]]
    smallest_timestamp_diff := min(timestamp_diff_results_arr)
    # validate latest report
    process_vuln_report(vuln_results[timestamp_diff_results_map[smallest_timestamp_diff]])
}

process_vuln_report(report) if {
    report.isSuccess == true
    valid_signatures(report)
}

valid_signatures(_) := true {
    require_signature == false
}

valid_signatures(report) := true {
    require_signature
    count(report.nestedResults) > 0
    some nestedResult in report.nestedResults
    nestedResult.artifactType == "application/vnd.cncf.notary.signature"
    nestedResult.isSuccess
}