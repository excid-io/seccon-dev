apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: ratifyverification
spec:
  crd:
    spec:
      names:
        kind: RatifyVerification
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package ratifyverification
        
        # Get data from Ratify
        remote_data := response {
          trace("Input object:", input)
          images := get_images(input.review.object)
          response := external_data({"provider": "ratify-provider", "keys": images})
        }

        # # Extract images based on resource type
        # get_images(obj) = images {
        #   # For Pods
        #   obj.kind == "Pod"
        #   images := [img | img = obj.spec.containers[_].image]
        # }
        
        get_images(obj) = images {
          # For Deployments
          obj.kind == "Deployment"
          images := [img | img = obj.spec.template.spec.containers[_].image]
        }

        # Base Gatekeeper violation
        violation[{"msg": msg}] {
          general_violation[{"result": msg}]
        }
        
        # Check if there are any system errors
        general_violation[{"result": result}] {
          err := remote_data.system_error
          err != ""
          result := sprintf("System error calling external data provider: %s", [err])
        }
        
        # Check if there are errors for any of the images
        general_violation[{"result": result}] {
          count(remote_data.errors) > 0
          result := sprintf("Error validating one or more images: %s", remote_data.errors)
        }
        
        # Check if the success criteria is true
        general_violation[{"result": result}] {
          subject_validation := remote_data.responses[_]
          subject_validation[1].isSuccess == false
          result := sprintf("Subject failed verification: %s", [subject_validation[0]])
        }